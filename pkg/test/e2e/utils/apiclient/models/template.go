// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Template Template
//
// swagger:model Template
type Template struct {

	// secondary disks
	SecondaryDisks []*SecondaryDisks `json:"secondaryDisks"`

	// cpus
	Cpus *ConfigVarString `json:"cpus,omitempty"`

	// memory
	Memory *ConfigVarString `json:"memory,omitempty"`

	// primary disk
	PrimaryDisk *PrimaryDisk `json:"primaryDisk,omitempty"`
}

// Validate validates this template
func (m *Template) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSecondaryDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCpus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryDisk(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Template) validateSecondaryDisks(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryDisks) { // not required
		return nil
	}

	for i := 0; i < len(m.SecondaryDisks); i++ {
		if swag.IsZero(m.SecondaryDisks[i]) { // not required
			continue
		}

		if m.SecondaryDisks[i] != nil {
			if err := m.SecondaryDisks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("secondaryDisks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Template) validateCpus(formats strfmt.Registry) error {
	if swag.IsZero(m.Cpus) { // not required
		return nil
	}

	if m.Cpus != nil {
		if err := m.Cpus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpus")
			}
			return err
		}
	}

	return nil
}

func (m *Template) validateMemory(formats strfmt.Registry) error {
	if swag.IsZero(m.Memory) { // not required
		return nil
	}

	if m.Memory != nil {
		if err := m.Memory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memory")
			}
			return err
		}
	}

	return nil
}

func (m *Template) validatePrimaryDisk(formats strfmt.Registry) error {
	if swag.IsZero(m.PrimaryDisk) { // not required
		return nil
	}

	if m.PrimaryDisk != nil {
		if err := m.PrimaryDisk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primaryDisk")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this template based on the context it is used
func (m *Template) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSecondaryDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCpus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrimaryDisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Template) contextValidateSecondaryDisks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SecondaryDisks); i++ {

		if m.SecondaryDisks[i] != nil {
			if err := m.SecondaryDisks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("secondaryDisks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Template) contextValidateCpus(ctx context.Context, formats strfmt.Registry) error {

	if m.Cpus != nil {
		if err := m.Cpus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpus")
			}
			return err
		}
	}

	return nil
}

func (m *Template) contextValidateMemory(ctx context.Context, formats strfmt.Registry) error {

	if m.Memory != nil {
		if err := m.Memory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memory")
			}
			return err
		}
	}

	return nil
}

func (m *Template) contextValidatePrimaryDisk(ctx context.Context, formats strfmt.Registry) error {

	if m.PrimaryDisk != nil {
		if err := m.PrimaryDisk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primaryDisk")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Template) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Template) UnmarshalBinary(b []byte) error {
	var res Template
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
