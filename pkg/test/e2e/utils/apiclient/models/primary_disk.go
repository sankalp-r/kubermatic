// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrimaryDisk PrimaryDisk
//
// swagger:model PrimaryDisk
type PrimaryDisk struct {

	// os image URL
	OsImageURL *ConfigVarString `json:"osImageURL,omitempty"`

	// size
	Size *ConfigVarString `json:"size,omitempty"`

	// storage class name
	StorageClassName *ConfigVarString `json:"storageClassName,omitempty"`
}

// Validate validates this primary disk
func (m *PrimaryDisk) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOsImageURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageClassName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrimaryDisk) validateOsImageURL(formats strfmt.Registry) error {
	if swag.IsZero(m.OsImageURL) { // not required
		return nil
	}

	if m.OsImageURL != nil {
		if err := m.OsImageURL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("osImageURL")
			}
			return err
		}
	}

	return nil
}

func (m *PrimaryDisk) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if m.Size != nil {
		if err := m.Size.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("size")
			}
			return err
		}
	}

	return nil
}

func (m *PrimaryDisk) validateStorageClassName(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageClassName) { // not required
		return nil
	}

	if m.StorageClassName != nil {
		if err := m.StorageClassName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageClassName")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this primary disk based on the context it is used
func (m *PrimaryDisk) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOsImageURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageClassName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrimaryDisk) contextValidateOsImageURL(ctx context.Context, formats strfmt.Registry) error {

	if m.OsImageURL != nil {
		if err := m.OsImageURL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("osImageURL")
			}
			return err
		}
	}

	return nil
}

func (m *PrimaryDisk) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if m.Size != nil {
		if err := m.Size.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("size")
			}
			return err
		}
	}

	return nil
}

func (m *PrimaryDisk) contextValidateStorageClassName(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageClassName != nil {
		if err := m.StorageClassName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageClassName")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrimaryDisk) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrimaryDisk) UnmarshalBinary(b []byte) error {
	var res PrimaryDisk
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
