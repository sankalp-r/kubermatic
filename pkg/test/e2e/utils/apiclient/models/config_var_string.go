// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigVarString config var string
//
// swagger:model ConfigVarString
type ConfigVarString struct {

	// value
	Value string `json:"value,omitempty"`

	// config map key ref
	ConfigMapKeyRef *GlobalConfigMapKeySelector `json:"configMapKeyRef,omitempty"`

	// secret key ref
	SecretKeyRef *GlobalSecretKeySelector `json:"secretKeyRef,omitempty"`
}

// Validate validates this config var string
func (m *ConfigVarString) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigMapKeyRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecretKeyRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigVarString) validateConfigMapKeyRef(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigMapKeyRef) { // not required
		return nil
	}

	if m.ConfigMapKeyRef != nil {
		if err := m.ConfigMapKeyRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configMapKeyRef")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigVarString) validateSecretKeyRef(formats strfmt.Registry) error {
	if swag.IsZero(m.SecretKeyRef) { // not required
		return nil
	}

	if m.SecretKeyRef != nil {
		if err := m.SecretKeyRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secretKeyRef")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this config var string based on the context it is used
func (m *ConfigVarString) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfigMapKeyRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecretKeyRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigVarString) contextValidateConfigMapKeyRef(ctx context.Context, formats strfmt.Registry) error {

	if m.ConfigMapKeyRef != nil {
		if err := m.ConfigMapKeyRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configMapKeyRef")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigVarString) contextValidateSecretKeyRef(ctx context.Context, formats strfmt.Registry) error {

	if m.SecretKeyRef != nil {
		if err := m.SecretKeyRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secretKeyRef")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigVarString) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigVarString) UnmarshalBinary(b []byte) error {
	var res ConfigVarString
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
